/*
Copyright 2021 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "knative.dev/eventing/pkg/apis/eventing/v1beta1"
)

// EventTypeQueryLister helps list EventTypeQueries.
// All objects returned here must be treated as read-only.
type EventTypeQueryLister interface {
	// List lists all EventTypeQueries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.EventTypeQuery, err error)
	// EventTypeQueries returns an object that can list and get EventTypeQueries.
	EventTypeQueries(namespace string) EventTypeQueryNamespaceLister
	EventTypeQueryListerExpansion
}

// eventTypeQueryLister implements the EventTypeQueryLister interface.
type eventTypeQueryLister struct {
	indexer cache.Indexer
}

// NewEventTypeQueryLister returns a new EventTypeQueryLister.
func NewEventTypeQueryLister(indexer cache.Indexer) EventTypeQueryLister {
	return &eventTypeQueryLister{indexer: indexer}
}

// List lists all EventTypeQueries in the indexer.
func (s *eventTypeQueryLister) List(selector labels.Selector) (ret []*v1beta1.EventTypeQuery, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.EventTypeQuery))
	})
	return ret, err
}

// EventTypeQueries returns an object that can list and get EventTypeQueries.
func (s *eventTypeQueryLister) EventTypeQueries(namespace string) EventTypeQueryNamespaceLister {
	return eventTypeQueryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventTypeQueryNamespaceLister helps list and get EventTypeQueries.
// All objects returned here must be treated as read-only.
type EventTypeQueryNamespaceLister interface {
	// List lists all EventTypeQueries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.EventTypeQuery, err error)
	// Get retrieves the EventTypeQuery from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.EventTypeQuery, error)
	EventTypeQueryNamespaceListerExpansion
}

// eventTypeQueryNamespaceLister implements the EventTypeQueryNamespaceLister
// interface.
type eventTypeQueryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventTypeQueries in the indexer for a given namespace.
func (s eventTypeQueryNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.EventTypeQuery, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.EventTypeQuery))
	})
	return ret, err
}

// Get retrieves the EventTypeQuery from the indexer for a given namespace and name.
func (s eventTypeQueryNamespaceLister) Get(name string) (*v1beta1.EventTypeQuery, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("eventtypequery"), name)
	}
	return obj.(*v1beta1.EventTypeQuery), nil
}
